//
//  main.m
//  ObfuscateCLI
//
//  Created by Hamilton Feltman on 2020/10/1.
//

#import <Foundation/Foundation.h>
#import "Obfuscator.h"
#import "NSFileHandle+Utilities.h"

#define VA(...) [NSString stringWithFormat:__VA_ARGS__]

@interface ObfuscateCLI : NSObject
@end

@implementation ObfuscateCLI

+ (int)writeHeader:(NSDictionary *)gen output:(NSFileHandle *)output {

	NSArray *successful = gen[@"successful"];
	NSArray *unsuccessful = gen[@"unsuccessful"];
	NSArray *salt = gen[@"salt"];
	NSDictionary *code = gen[@"code"];
	NSString *header = code[@"header"];
	NSString *implementation = code[@"implementation"];

	[output writeString:@"// Generated by ObfuscateCLI\n\n"];
	[output writeString:@"#if !defined (DEFINE_FUNCTIONS)\n\n"];
	[output writeString:header];
	[output writeString:@"\n#else\n\n"];
	[output writeString:VA(@"#define kClassSalts %@\n\n", salt)];
	[output writeString:implementation];
	[output writeString:@"#endif\n"];

	if (unsuccessful.count > 0) {
		[output writeString:@"#error needs more salt!\n"];
		NSLog(@"Needs more salt!");
		return -1;
	}
	if (successful.count == 0 || header.length == 0 || implementation.length == 0) {
		NSLog(@"Nothing got done.");
		return -1;
	}
	return 0;
}

+ (NSArray<Class> *)classesForStrings:(NSArray<NSString *> *)strings {
	NSMutableArray *array = @[].mutableCopy;
	for (NSString *str in strings) {
		id klass = NSClassFromString(str);
		if (!klass) {
			NSLog(@"%@ is not a valid obj-c class", str);
			return nil;
		}
		[array addObject:klass];
	}
	return array.copy;
}

@end



int main(int argc, const char *argv[]) {
	@autoreleasepool {
		if (argc < 4) {
			NSLog(@"Usage: %s input.json output.h <class list>", argv[0]);
			return -1;
		}
		NSString *inputFilename = @(argv[1]);
		NSString *outputFilename = @(argv[2]);
		NSArray<NSString *> *saltClassList = [@(argv[3]) componentsSeparatedByString:@"+"];
		NSArray<Class> *classes = [ObfuscateCLI classesForStrings:saltClassList];
		if (classes.count == 0) {
			NSLog(@"Problem with class list %s", argv[3]);
			NSLog(@"Use '+' to separate class names: \"NSArray+NSData+NSCoding\" etc");
			return -1;
		}

		NSInputStream *stream = [NSInputStream.alloc initWithFileAtPath:inputFilename];
		if (!stream) {
			NSLog(@"Can't open input file for reading: %@", inputFilename);
			return -1;
		}
		[stream open];

		[NSFileManager.defaultManager removeItemAtPath:outputFilename error:nil];
		[NSFileManager.defaultManager createFileAtPath:outputFilename contents:nil attributes:nil];
		NSFileHandle *output = [NSFileHandle fileHandleForWritingAtPath:outputFilename];
		if (!output) {
			NSLog(@"Can't open output file for writing: %@", outputFilename);
			return -1;
		}
		NSError *error = nil;
		NSArray *json = [NSJSONSerialization JSONObjectWithStream:stream options:0 error:&error];
		if ([json isKindOfClass:NSArray.class] == NO || json.count == 0) {
			NSLog(@"Problem with input, needs a single json array: %@", inputFilename);
			return -1;
		}
		NSDictionary *gen = [Obfuscator generateCodeWithSalt:classes WithStrings:json];
		return gen.count>0 ? [ObfuscateCLI writeHeader:gen output:output] : -1;
	}
}


